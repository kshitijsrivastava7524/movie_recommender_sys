# -*- coding: utf-8 -*-
"""Copy of recommender_system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12Nz5iLleih5TLkFUWJCXIjqRLRDhIjiP
"""

import numpy as np
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer

raw_data = pd.read_csv('/content/tmdb_5000_movies.csv')
# Open the CSV file and read it using the csv module
with open('/content/tmdb_5000_credits.csv', 'r', encoding='utf-8') as file:
    try:
        credit_data = pd.read_csv(file)
    except csv.Error as e:
        # Print the error message
        print(f'Error reading CSV file: {e}')
        # Move the file pointer to the next line to continue reading
        file.readline()
        # Read the remaining lines using pandas
        credit_data = pd.read_csv(file)

raw_data.head()

credit_data.head()

raw_data.shape

credit_data.shape

raw_data.isnull().sum()

credit_data.isnull().sum()

#lets merge both the dataframes on the basis of title
merged_data = pd.merge(credit_data , raw_data ,on='title',how='inner')

merged_data.head()

merged_data.shape

merged_data.isnull().sum()

#genre id keywords title overview cast crew
data = merged_data[['overview','keywords','id','genres','cast','crew','title']]

data.shape

data.head()

data.isnull().sum()

data.describe()

data.info()

data.dropna(inplace=True)

data.isnull().sum()

data.duplicated().sum()

import ast
def convert(obj):
  l=[]
  for i in ast.literal_eval(obj):
    l.append(i['name'])
  return l

data['genres']=data['genres'].apply(convert)

data.head()

def convert3(obj):
  l=[]
  j=0
  for i in ast.literal_eval(obj):
    if j!=3:
      l.append(i['character'])
      j=j+1
    else:
      break;
  return l

data['cast']=data['cast'].apply(convert3)

data.head()

data['keywords']=data['keywords'].apply(convert)

data.head()

data['crew'][0]

def convertdirector(obj):
  l=[]
  for i in ast.literal_eval(obj):
    if i['job']=='Director':
      l.append(i['name'])
      break
  return l

data['crew'] = data['crew'].apply(convertdirector)

data.head()

data['overview']= data['overview'].apply(lambda x:x.split())

data.head()

#apply trnasformation for removing the space betweeen the names
data['cast']= data['cast'].apply(lambda x:[i.replace(" ","") for i in x])
data['crew']= data['crew'].apply(lambda x:[i.replace(" ","") for i in x])
data['keywords']= data['keywords'].apply(lambda x:[i.replace(" ","") for i in x])
data['genres']= data['genres'].apply(lambda x:[i.replace(" ","") for i in x])

data.head()



data['tags'] = data['overview'] + data['cast'] + data['crew'] + data['keywords'] + data['genres']

new_dataframe = data[['id','tags','title']]

new_dataframe.head()

#convert list to string
new_dataframe['tags'] = new_dataframe['tags'].apply(lambda x:" ".join(x))

new_dataframe

new_dataframe['tags'] = new_dataframe['tags'].apply(lambda x:x.lower())

new_dataframe

new_dataframe['tags'].fillna('', inplace=True)

from nltk.stem import PorterStemmer

stemmer = PorterStemmer()
def stem(line):
  y=[]
  for i in line.split():
    y.append(stemmer.stem(i))
  return " ".join(y)

new_dataframe['tags']= new_dataframe['tags'].apply(stem)

vectorizer = CountVectorizer(max_features=5000, stop_words='english')

# Transform the 'tags' column and convert the sparse matrix to a dense array
tags_vectors = vectorizer.fit_transform(new_dataframe['tags']).toarray()

feature_names = vectorizer.get_feature_names_out()

# Print the feature names
print("Feature names (vocabulary):", feature_names)

from sklearn.metrics.pairwise import cosine_similarity
similarity = cosine_similarity(tags_vectors)
sorted(enumerate(similarity[0]),reverse=True,key=lambda x:x[1])[1:6]

similarity[0]
import enum

def recommend(text):
  movie_index=new_dataframe[new_dataframe['title']==text].index[0]
  if length(movie_index) == 0:
            print("Movie not found.")
  else:
    distances=similarity[movie_index]
    movie_list=sorted(list(enumerate(distances)),reverse=True,key=lambda x:x[1])[1:6]
    for i in movie_list:
      print(new_dataframe.iloc[i[0]].title)

recommend('Iron Man')

